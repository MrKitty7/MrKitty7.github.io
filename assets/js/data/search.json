[ { "title": "Ship VM With Docker", "url": "/posts/ship-vm-with-docker-and-grafana/", "categories": "homelab, machines, virtual-machines", "tags": "servers, ubuntu, docker, grafana", "date": "2022-06-25 00:00:00 +0200", "snippet": "Making the PERFECT Ship VM with Docker and GrafanaWe’ll be making a Ship VM, meaning it will store all our Docker containers, and also, we’ll setup Grafana on it to monitor all our Docker containers. Let’s get started!Let’s begin by making our VM in ProxmoxNote: You can use any hypervisor you choose.Make your VM in Proxmox, I recommend using Ubuntu Server 20.04 as your OS.After your VM has been created, start it up. Click on the console and install Ubuntu Server.After it’s done, reboot.Next, run these commands:sudo apt update &amp;&amp; sudo apt upgradeAfter you update your machine, install some essential tools:sudo apt install docker.io docker-compose net-tools htop python3 qemu-guest-agent -yAfter that’s done, we can create a Portainer volume:docker volume create portainer_dataNow we can install Portainer:sudo docker run -d -p 8000:8000 -p 9443:9443 --name portainer \\ --restart=always \\ -v /var/run/docker.sock:/var/run/docker.sock \\ -v portainer_data:/data \\ portainer/portainer-ce:2.9.3Check if the container is running:sudo docker psNow head over to Portainer’s web interface:https://&lt;ipaddress&gt;:9443Let’s start by making a folder called docker_volumes in which we’ll have all our volumes for containers.Now let’s get Grafana LOKI set-up.First, in docker_volume folder run these commands:mkdir grafanamkdir lokimkdir promtailNext, log in to your Portainer interface and head over to Stacks and click Add Stack. Name it ‘loki’.version: \"3\"networks: loki:services: loki: image: grafana/loki:2.4.0 volumes: - /home/serveradmin/docker_volumes/loki:/etc/loki ports: - \"3100:3100\" restart: unless-stopped command: -config.file=/etc/loki/loki-config.yml networks: - loki promtail: image: grafana/promtail:2.4.0 volumes: - /var/log:/var/log - /home/serveradmin/docker_volumes/promtail:/etc/promtail # ports: # - \"1514:1514\" # this is only needed if you are going to send syslogs restart: unless-stopped command: -config.file=/etc/promtail/promtail-config.yml networks: - loki grafana: image: grafana/grafana:latest user: \"1000\" volumes: - /home/serveradmin/docker_volumes/grafana:/var/lib/grafana ports: - \"3000:3000\" restart: unless-stopped networks: - lokiMake sure to replace the user ‘serveradmin’ with your user aswell as the user id. But do not run the stack yet.nano loki/loki-config.ymlPut the following config into the file:auth_enabled: falseserver: http_listen_port: 3100 grpc_listen_port: 9096common: path_prefix: /tmp/loki storage: filesystem: chunks_directory: /tmp/loki/chunks rules_directory: /tmp/loki/rules replication_factor: 1 ring: instance_addr: 127.0.0.1 kvstore: store: inmemoryschema_config: configs: - from: 2020-10-24 store: boltdb-shipper object_store: filesystem schema: v11 index: prefix: index_ period: 24hruler: alertmanager_url: http://localhost:9093nano promtail/promtail-config.ymlPut the following config into the file:server: http_listen_port: 9080 grpc_listen_port: 0positions: filename: /tmp/positions.yamlclients: - url: http://loki:3100/loki/api/v1/push#scrape_configs:# local machine logs#- job_name: local # static_configs: # - targets:# - localhost # labels:# job: varlogs # __path__: /var/log/*log # docker logsscrape_configs: - job_name: docker pipeline_stages: - docker: {} static_configs: - labels: job: docker __path__: /var/lib/docker/containers/*/*-json.log# syslog target#- job_name: syslog# syslog:# listen_address: 0.0.0.0:1514 # make sure you also expose this port on the container# idle_timeout: 60s# label_structured_data: yes# labels:# job: \"syslog\"# relabel_configs:# - source_labels: ['__syslog_message_hostname']# target_label: 'host'Now run the stack.Install the docker plugin:docker plugin install grafana/loki-docker-driver:latest --alias loki --grant-all-permissionsEdit the docker daemon json:sudo nano /etc/docker/daemon.json{ \"log-driver\": \"loki\", \"log-opts\": { \"loki-url\": \"http://localhost:3100/loki/api/v1/push\", \"loki-batch-size\": \"400\" }}sudo systemctl restart dockerNow, let’s head to the Grafana interface.Now let’s add a new container.Uptime Kuma:---version: \"3.1\"services: uptime-kuma: image: louislam/uptime-kuma:1 container_name: uptime-kuma volumes: - /home/serveradmin/docker_volumes/uptime-kuma/data:/app/data ports: - 3001:3001 restart: unless-stopped security_opt: - no-new-privileges:trueVisit the interface at:http://192.168.1.5:3001to be continued" }, { "title": "Setting up Pterodactyl", "url": "/posts/setting-up-pterodactyl/", "categories": "homelab, machines, virtual-machines", "tags": "servers, ubuntu, pterodactyl, gaming", "date": "2022-06-25 00:00:00 +0200", "snippet": "Setting up PterodactylWe’ll be setting up Pterodactyl WITHOUT Docker, because it will be easier and will avoid issues.to be continued" }, { "title": "Ubuntu Resize Disk LVM", "url": "/posts/ubuntu-resizedisk-lvm/", "categories": "homelab, machines, virtual-machines", "tags": "servers, ubuntu", "date": "2022-06-24 00:00:00 +0200", "snippet": "Ubuntu Resize Disk LVMWhen you add more space to your disk in ex. Proxmox, you need to resize it in Ubuntu.Here are the commands that can help you achieve that:First check your disklsblkYou should get something like this:NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTsda 8:0 0 1T 0 disk├─sda1 8:1 0 1M 0 part├─sda2 8:2 0 1G 0 part /boot└─sda3 8:3 0 1T 0 part └─ubuntu--vg-ubuntu--lv 253:0 0 31G 0 lvm /For me, I had to resize the sda3 partition, on the sda disk. Specifically the ‘ubuntu–vg-ubuntu–lv’ LVM.To resize the sda3 partition use:sudo partedresizepart 3 100%quitYou should get something like this:GNU Parted 3.3Using /dev/sdaWelcome to GNU Parted! Type 'help' to view a list of commands.(parted) resizepart 3 100%(parted) quitInformation: You may need to update /etc/fstab.Next, we need to extend the logical volume using:sudo lvextend -r -l +100%FREE /dev/mapper ubuntu--vg-ubuntu--lvYou should see something like this:$ sudo lvextend -r -l +100%FREE /dev/mapper/ubuntu--vg-ubuntu--lv Size of logical volume ubuntu-vg/ubuntu-lv changed from &lt;31.00 GiB (7935 extents) to 1.03 TiB (270079 extents). Logical volume ubuntu-vg/ubuntu-lv successfully resized.resize2fs 1.45.5 (07-Jan-2020)Filesystem at /dev/mapper/ubuntu--vg-ubuntu--lv is mounted on /; on-line resizing requiredold_desc_blocks = 4, new_desc_blocks = 132The filesystem on /dev/mapper/ubuntu--vg-ubuntu--lv is now 276560896 (4k) blocks long.For the final step, you may need to resize the phyisical volume using:sudo pvresize /dev/sda3You should see something like this:Physical volume \"/dev/sda3\" changed1 physical volume(s) resized or updated / 0 physical volume(s) not resizedFinally, we check if the resize is complete using:lsblkYou should see something like this:$ lsblkNAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINTsda 8:0 0 1T 0 disk├─sda1 8:1 0 1M 0 part├─sda2 8:2 0 1G 0 part /boot└─sda3 8:3 0 1T 0 part └─ubuntu--vg-ubuntu--lv 253:0 0 1T 0 lvm /If lsblk output shows that the ‘ubuntu–vg-ubuntu–lv’ LVM has the size you wanted it to resize to, you’re done!" } ]
